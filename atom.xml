<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Cocoa Covers]]></title>
  <link href="http://cocoacovers.com/atom.xml" rel="self"/>
  <link href="http://cocoacovers.com/"/>
  <updated>2014-08-28T11:05:10-04:00</updated>
  <id>http://cocoacovers.com/</id>
  <author>
    <name><![CDATA[Ben Packard]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Zooming, Blurring Profile Photo by Tweetbot]]></title>
    <link href="http://cocoacovers.com/blog/2014/03/31/the-zooming-blurring-profile-photo-by-tweetbot/"/>
    <updated>2014-03-31T21:26:02-04:00</updated>
    <id>http://cocoacovers.com/blog/2014/03/31/the-zooming-blurring-profile-photo-by-tweetbot</id>
    <content type="html"><![CDATA[<p><a href="http://tapbots.com/software/tweetbot/">Tweetbot</a> is a Twitter client by Tapbots. It is full of thoughtful, playful interactions. One of my favorite details is the zooming header image effect when you scroll a user&rsquo;s profile:</p>

<p><img src="http://cocoacovers.com/images/1/original.gif" alt="Original" /></p>

<p>It&rsquo;s a neat way to handle the extra canvas exposed by the elasticity of the scrolling behavior, which can otherwise look a little awkward when the uppermost content is a photo or some other visually busy element. This is especially true when a toolbar is present &ndash; Safari is a good example of the default behavior:</p>

<p><img src="http://cocoacovers.com/images/1/safari-scroll.gif" alt="Safari scrolling" /></p>

<p>There&rsquo;s nothing egregious about this interaction; it&rsquo;s just a little clumsy-looking. A big gray box, smack in the middle of the more artfully crafted toolbar and content. Tweetbot turns this same scenario into an opportunity to delight the user.</p>

<!-- more -->


<h2>What&rsquo;s Hapenning</h2>

<p>There are three silmultaneous animations occurring as the user scrolls. First, and most obviously, the image expands to fill the available space. Note that the image maintains its aspect ratio, though &ndash; it never stretches. Also, if the background image happens to be taller than the content, the hidden edges of the photo are fully revealed before any scaling takes place.</p>

<p>We also have the gradual fade-out of the user&rsquo;s profile information, and the un-blurring of the image. If you look carefully, the image also brightens as it is revealed &ndash; presumably to ensure enough contrast with the white text in its resting state.</p>

<h2>My Cover</h2>

<p>Let&rsquo;s start by creating two main views inside a scrollview. The &lsquo;profile view&rsquo; will hold the circular photo and all of the user info. I&rsquo;ve given it a gray background for now so its easy to identify. Below the profile view, the &lsquo;content view&rsquo; is just a screenshot from the app since we&rsquo;re not going to be implementing that part.</p>

<p><img src="http://cocoacovers.com/images/1/two-subviews.gif" alt="Two subviews" /></p>

<p>Next, we place the header image underneath the profile view. The trick here is to make the image its own independent view in the scroller &ndash; a <em>sibling</em> of the profile view, not a child. This will let us adjust it with much more freedom since it won&rsquo;t be constrained by the bounds of the profile view.</p>

<p>Also note that I&rsquo;ve used an image that is taller than the profile view so that we can test the zooming action works correctly later.</p>

<p><img src="http://cocoacovers.com/images/1/background-added.png" alt="Background added" /></p>

<p>Now we will start animating the zoom. First, we need to re-position the image as the user scrolls to make sure that the photo is always vertically centered between the bottom of the toolbar and the top of the content view. Remember that the profile view doesn&rsquo;t grow in height &ndash; it just moves down the page with the rest of the content. So the center of the image actually moves <em>away</em> from the center of the profile view as the user scrolls. Since I&rsquo;m a fan of autolayout (we do exist), I added an <code>NSLayoutConstraint</code> that does exactly that. For every two pixels of scrolling, one pixel of vertical adjustment is required to maintain a vertical center alignment.</p>

<p><img src="http://cocoacovers.com/images/1/centering.gif" alt="Centering" /></p>

<p>Now lets get the zoom working. We can add another constraint here to set the size of the image view to match the native proportions of the image itself. Just like before, this gives us a constant to tweak as the user scrolls.</p>

<p><img src="http://cocoacovers.com/images/1/stretching.gif" alt="Stretching" /></p>

<p>Its a start, but the image is stretching. This is easily rectified using one more layout constraint to maintain the original aspect ratio.</p>

<p><img src="http://cocoacovers.com/images/1/aspect-ratio.gif" alt="Aspect ratio" /></p>

<p>Much better.</p>

<p>Next we need to blur and darken the image, and only reveal it incrementally. If we place a blurred and darkened copy of the image into the view heirarchy we can just update its transparency. I found a nice implementation of the necessary image adjustments by <a href="https://github.com/bryanjclark/ios-darken-image-with-cifilter">Brian Clark</a> and slotted my new image into place above the real photo.</p>

<p><img src="http://cocoacovers.com/images/1/blurred-layer.gif" alt="Blurred layer" /></p>

<p>The blurry image is constrained to maintain the same position and size of the original photo. Now we can simply fade out both the profile info and the blurry image to reveal the photo.</p>

<p><img src="http://cocoacovers.com/images/1/almost.gif" alt="Almost right" /></p>

<p>We&rsquo;re almost there. But we&rsquo;re still missing that nice detail from the original &ndash; the hidden top and bottom slivers of the image should be revealed before any zooming takes place. This is accomplished by comparing the height of the image with that of the profile view and storing an &lsquo;overlap&rsquo; value that represents how much of the photo is hidden. Only once the user has scrolled beyond that value does the scaling begin.</p>

<p><img src="http://cocoacovers.com/images/1/final.gif" alt="Final version" /></p>

<h2>In the Wild</h2>

<p>I added this same detail into my baseball app <a href="http://nohitteralerts.com">No-Hitter Alerts</a>, though I didn&rsquo;t need the blurring behavior since the image is a known quantity and doesn&rsquo;t obscure the text.</p>

<p><img src="http://cocoacovers.com/images/1/no-hitter-alerts.gif" alt="No-Hitter Alerts" /></p>

<h2>The Tab</h2>

<p>The source code for this implementation can be found on <a href="https://github.com/benpackard/BENTweetbotHeader">GitHub</a>. Thanks for reading!</p>

<h4>Update</h4>

<p><a href="https://twitter.com/bryanjclark">Brian Clark</a> improved his image darkening implementation after I posted this article. Thanks to him, and to <a href="https://twitter.com/Blubser">Lukas Spie√ü</a> for updating the <a href="https://github.com/benpackard/BENTweetbotHeader">demo project</a>.</p>
]]></content>
  </entry>
  
</feed>
